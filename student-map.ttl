# Base is used internally to the map to construct URI for the maps.  It can be set
# an arbitrary URI and does not appear in data generated by the maps

@base <http://example.com/base/> .

# Prefixes used by RMLMapper.  These will appear in the output of RMLMapper, but are not
# used to construct any of the data

@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .

# Prefixes used to define VIVO data.  These will appear in the output of RMLMapper.  
# RMLMapper "knows" foaf, xsd, and skos.  These can be used below without declaration. But
# if they are not declared, RMLMapper spells them out in turtle and your data are
# ugly.

@prefix foaf:  <http://xmlns.com/foaf/0.1/> .
@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix :      <http://vivoweb.org/ontology/core#> .
@prefix obo:   <http://purl.obolibrary.org/obo/> .
@prefix vcard: <http://www.w3.org/2006/vcard/ns#> .
@prefix bibo:  <http://purl.org/ontology/bibo/> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix data:  <http://vivo.ufl.edu/individual/> .

# Local prefix, if any

@prefix uf: <http://vivo.ufl.edu/ontology/vivo-ufl/> .

# ----------  Maps for each of the subjects (things) to be created by RMLMapper ----------


<StartDateMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ];
	
  rr:subjectMap [ 
    rr:template "data:date/{StartDate}";
    rr:class :DateTimeValue
  ];

  rr:predicateObjectMap [ 
    rr:predicate :dateTime; 
    rr:objectMap [ rml:reference "StartDate"; rr:datatype xsd:datetime; ]
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :dateTimePrecision; 
    rr:object :yearMonthDayPrecision
  ];
.


<Concept1Map>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:concept/{ResearchArea1}";
    rr:class skos:Concept 
  ];

  rr:predicateObjectMap [ 
    rr:predicate rdfs:label; 
    rr:objectMap [ rml:reference "ResearchArea1"; rr:datatype xsd:string; ]
  ];
.

<Concept2Map>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:concept/{ResearchArea2}";
    rr:class skos:Concept 
  ];

  rr:predicateObjectMap [ 
    rr:predicate rdfs:label; 

    rr:objectMap [ rml:reference "ResearchArea2"; rr:datatype xsd:string;]
  ];
.

<VcardMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:vcard/{Gatorlink}";
    rr:class vcard:Individual
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate vcard:hasTitle; 
    rr:objectMap [ 
      rr:parentTriplesMap <TitleMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate vcard:hasTelephone; 
    rr:objectMap [ 
      rr:parentTriplesMap <TelephoneMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate vcard:hasEmail; 
    rr:objectMap [ 
      rr:parentTriplesMap <EmailMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];

  rr:predicateObjectMap [ 
    rr:predicate vcard:hasURL; 
    rr:objectMap [ 
      rr:parentTriplesMap <WebsiteMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate vcard:hasURL; 
    rr:objectMap [ 
      rr:parentTriplesMap <TwitterMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
.

<PositionDateTimeIntervalMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:datetimeinterval/{StartDate}/NA";
    rr:class :DateTimeInterval
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :start; 
    rr:objectMap [ 
      rr:parentTriplesMap <StartDateMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
.

<PositionMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:position/{Gatorlink}/{Department}";
    rr:class :Position
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :dateTimeInterval; 
    rr:objectMap [ 
      rr:parentTriplesMap <PositionDateTimeIntervalMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :relates; 
    rr:objectMap [ 
      rr:parentTriplesMap <OrgMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
.

<AuthorMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:authorship/{Gatorlink}/{PMID}";
    rr:class :Authorship
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :relates; 
    rr:objectMap [ 
      rr:parentTriplesMap <PubMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
.

<TeacherRoleMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:teacherrole/{Gatorlink}/{Course}";
    rr:class :TeacherRole
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate obo:BFO_0000054; 
    rr:objectMap [ 
      rr:parentTriplesMap <CourseMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
.

<PIRoleMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:pirole/{Gatorlink}/{GrantPI}";
    rr:class :PrincipalInvestigatorRole
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :relatedBy; 
    rr:objectMap [ 
      rr:parentTriplesMap <GrantPIMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
.

<CoIRoleMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:coirole/{Gatorlink}/{GrantCoI}";
    rr:class :Co-InvestigatorRole
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :relatedBy; 
    rr:objectMap [ 
      rr:parentTriplesMap <GrantCoIMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
.

<MemberRoleMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:memberrole/{Gatorlink}/{GrantMember}";
    rr:class :MemberRole
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :relatedBy; 
    rr:objectMap [ 
      rr:parentTriplesMap <GrantMemberMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
.

<TitleMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:vcard/title/{Gatorlink}";
    rr:class vcard:Title
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate vcard:title; 
    rr:objectMap [ rml:reference "Title"; rr:language "en" ]
  ];
.

<TelephoneMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:vcard/telephone/{Gatorlink}";
    rr:class vcard:Telephone
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate vcard:telephone; 
    rr:objectMap [ rml:reference "Phone"; rr:datatype xsd:string ]
  ];
.

<EmailMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:vcard/email/{Gatorlink}";
    rr:class vcard:Email
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate vcard:email; 
    rr:objectMap [ rml:reference "Email"; rr:datatype xsd:string ]
  ];
.

<WebsiteMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:vcard/website/{Gatorlink}";
    rr:class vcard:URL
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate rdfs:label;
    rr:language "en";
    rr:object "Website"
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate vcard:url; 
    rr:objectMap [ rml:reference "Website"; rr:datatype xsd:anyURI ]
  ];
.

<TwitterMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:vcard/twitter/{Gatorlink}";
    rr:class vcard:URL
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate rdfs:label;
    rr:language "en";
    rr:object "Twitter"
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate vcard:url; 
    rr:objectMap [ rml:reference "Twitter"; rr:datatype xsd:anyURI ]
  ];
.

<OrgMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:organization/{Department}";
    rr:class foaf:Organization
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate rdfs:label; 
    rr:objectMap [ rml:reference "Department"; rr:language "en" ]
  ];
.

<PubMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:pub/{PMID}";
    rr:class :AcademicArticle
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :pmid; 
    rr:objectMap [ rml:reference "PMID"; rr:datatype xsd:int ]
  ];
.

<CourseMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:course/{Course}";
    rr:class :Course
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate uf:commonCourseNumber; 
    rr:objectMap [ rml:reference "Course"; rr:datatype xsd:string ]
  ];
.


<GrantPIMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:grant/{GrantPI}";
    rr:class :Grant
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :localAwardID; 
    rr:objectMap [ rml:reference "GrantPI"; rr:datatype xsd:string ]
  ];
.

<GrantCoIMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:grant/{GrantCoI}";
    rr:class :Grant
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :localAwardID; 
    rr:objectMap [ rml:reference "GrantCoI"; rr:datatype xsd:string ]
  ];
.

<GrantMemberMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:grant/{GrantMember}";
    rr:class :Grant
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :localAwardID; 
    rr:objectMap [ rml:reference "GrantMember"; rr:datatype xsd:string ]
  ];
.

<PersonMap>
  a rr:TriplesMap;
        
  rml:logicalSource [ 
    rml:source "student.csv";
    rml:referenceFormulation ql:CSV
  ] ;
	
  rr:subjectMap [ 
    rr:template "data:person/{Gatorlink}";
    rr:class foaf:Person 
  ];

  rr:predicateObjectMap [ 
    rr:predicate rdfs:label; 
    rr:objectMap [ rml:reference "Name"; rr:datatype xsd:string ]
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :hasResearchArea; 
    rr:objectMap [ 
      rr:parentTriplesMap <Concept1Map>;
      rr:joinCondition [
        rr:child "ResearchArea1";
        rr:parent "ResearchArea1";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :hasResearchArea; 
    rr:objectMap [ 
      rr:parentTriplesMap <Concept2Map>;
      rr:joinCondition [
        rr:child "ResearchArea2";
        rr:parent "ResearchArea2";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate obo:ARG_2000028; 
    rr:objectMap [ 
      rr:parentTriplesMap <VcardMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :relatedBy; 
    rr:objectMap [ 
      rr:parentTriplesMap <PositionMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate obo:RO_0000053; 
    rr:objectMap [ 
      rr:parentTriplesMap <PIRoleMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate obo:RO_0000053; 
    rr:objectMap [ 
      rr:parentTriplesMap <CoIRoleMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate obo:RO_0000053; 
    rr:objectMap [ 
      rr:parentTriplesMap <MemberRoleMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :relatedBy; 
    rr:objectMap [ 
      rr:parentTriplesMap <AuthorMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate uf:gatorlink ; 
    rr:objectMap [ rml:reference "Gatorlink"; rr:datatype xsd:string ]
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate obo:RO_0000053; 
    rr:objectMap [ 
      rr:parentTriplesMap <TeacherRoleMap>;
      rr:joinCondition [
        rr:child "Gatorlink";
        rr:parent "Gatorlink";
      ];
    ];
  ];
  
  rr:predicateObjectMap [ 
    rr:predicate :overview ; 
    rr:objectMap [ rml:reference "Overview"; rr:language "en" ]
  ];
  
  # Not current VIVO.  Future VIVO might simplify image handling by 
  # storing images in an Asset Store, with images accessed from the 
  # Asset Store via URI.
  
  rr:predicateObjectMap [ 
    rr:predicate :hasImage ; 
    rr:objectMap [ rml:reference "Image"; rr:datatype xsd:anyURI ]
  ];
  
.